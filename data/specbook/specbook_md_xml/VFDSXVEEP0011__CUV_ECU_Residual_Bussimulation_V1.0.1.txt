
<filename>VFDSXVEEP0011__CUV_ECU_Residual_Bussimulation_V1.0.1</filename>
<pages>

<page number="1">
Complete Vehicle Specification.

Specification Book.

**Scope**  
Applicable Document of Part 1.  
Common Electrical Specification for Supplier.  
CES Residual Bussimulation.

**Range of validity**  
Vinfast.

Document Administrator: Nguyen Dinh Dung.

The reproduction, distribution, and utilization of this document, as well as the communication of its contents to others without express authorization, is prohibited. Offenders will be held liable for the payment of damages. All rights reserved in the event of the grant of a patent, utility model, or design. Nothing in this standard supersedes applicable laws and regulations.
</page>

<page number="2">
Residual Bussimulation Specification VFDSXVEEP0011.

Approval confirmed by:
- **Director of Transmission Technology Center:** Dinh Duc Hiep.
- **System Integration Leader:** Sally Ann Houghton.
- **Software Leader:** Nguyen Hoang Long.
- **System Integration Engineer:** Nguyen Dinh Dung.

Change Order: Not applicable.  
Status: In work.  

Change History:  
- **Version 1.0.0:** First version. Date: 26.06.2019. Responsible person: Nguyen Dinh Dung.  
- **Version 1.0.1:** Update. Date: 12.10.2019. Responsible person: Nguyen Dinh Dung.
</page>

<page number="3">
Version: V1.0.0  
Residual Bussimulation Specification  
VFDSXVEEP0011  

### Table of Contents
**Scope**  1  
**Range of validity**  1  
**Approval confirmed by**  2  
**Change History**  2  

#### 1. General Information  4  
- **1.1. Language**  4  
- **1.2. Versioning**  4  

#### 2. Introduction  4  
- **2.1. Purpose of the Document**  4  
- **2.2. Terms and definitions**  4  
  - **2.2.1. Abbreviations**  4  
  - **2.2.2. Definitions**  4  

#### 3. System description  5  
- **3.1. Creation Process**  5  
  - **3.1.1. Process Overview**  5  
  - **3.1.2. Time limits**  5  
- **3.2. Software**  5  
  - **3.2.1. Software version**  5  
  - **3.2.2. Scripts**  6  
  - **3.2.3. Documentation**  6  
  - **3.2.4. Data exchange**  6  
- **3.3. Design rules**  6  
  - **3.3.1. Language**  6  
  - **3.3.2. CAN Specification**  6  
  - **3.3.3. Variables and signals**  6  
  - **3.3.4. Model**  6  
  - **3.3.5. Multiple CAN busses**  7  
  - **3.3.6. Visualization**  7  
- **3.4. Examples** 9  

#### 4. Development Environments  11  
- **4.1. Development Environment**  11  

#### 5. Testing  11  
- **5.1. Performed tests**  11  
- **5.2. Test reports**  11  

#### 6. References  11  
- **6.1. Applicable Documents**  12  
- **6.2. Norms and Standards**  12  

**VinFast Released**
</page>

<page number="4">
1. General Information.

1.1. Language.  
This Specification is made only in English language version.

1.2. Versioning.  
To determine the actual status of the present specification, see the following table:  
- **Version**: 0.1.0 - 0.49.9.  
  **State**: DRA "Draft".  
  **Gate/Milestone**: FUP.  
- **Version**: 0.50.0 - 0.99.9.  
  **State**: ICS "Inquiry Concept Specification".  
  **Gate/Milestone**: ILF.  
- **Version**: 1.0.0 - 1.99.9.  
  **State**: ISS "Inquiry Serial Specification".  
  **Gate/Milestone**: AF.  
- **Version**: 3.0.0.  
  **State**: FIN "Final".  
  **Gate/Milestone**: TA.

**Table 1: Rules for Versioning.**

Version Digit description:  
- First Digit: Major Release (Milestone Release).  
- Second Digit: Minor Release (Function description change).  
- Third Digit: No functional content change (e.g. spelling correction).  

2. Introduction.

2.1. Purpose of the Document.  
The aim of this document is to define rules for creating the residual bus simulation. It is necessary to stick to these rules, so that a proper functionality is ensured.

2.2. Terms and definitions.  
This chapter provides the details about Terms and definitions.

2.2.1. Abbreviations.  
**Table 2: List of abbreviations.**  
- CAN: Controller area network.  
- CAPL: CAN Access Programming Language.  
- CRC: Cyclic redundancy check.  
- DBC: Data base CAN.  
- ECU: Electronic control unit.  
- ESC: Electronic stability control.  
- HS-CAN: High speed controller area network.  
- ID: Identifier.  
- RBS: Residual bus simulation.  

2.2.2. Definitions.  
The following list of definitions are used throughout this document with the given meaning.  

**Obligation of Requirement Wording.**  
The following wording rules are used throughout this document:
- Shall.
</page>

<page number="5">
The word "shall" is used to state a binding requirement. Such requirements are externally verifiable by manipulation or observation.

The word "should" is used for preferences or desires in implementation that are not strictly binding.

The word "may" is used to denote options that are left to the implementer.

### 3. System Description

#### 3.1. Creation Process
1. The DBC-File is created based on the information of the supplier.
2. The DBC-File is distributed to each Module Leader and SE-team.
3. Each supplier has to create a model which represents their ECU.
4. Every model is collected.
5. The ECU models are used for testing at sub-system test benches.
6. All models are merged into a residual bus simulation.
7. The residual bus simulation is distributed to each Module Leader and SE-team.
8. Each supplier has to test their ECU with the residual bus simulation.

#### 3.1.1. Process Overview
**Figure 1: Process Overview**  
The diagram illustrates the workflow where a DBC file is created and distributed to various suppliers (A, B, C, D, and E). Each supplier generates an ECU model. These models are then used in sub-system test benches, merged, and distributed back to Module Leaders for testing compatibility of their respective ECUs with the residual bus simulation.

#### 3.1.2. Time Limits
After the first DBC file draft, the residual bus simulation shall be created and sent by the suppliers. If there is a later release, each supplier shall update and send the updated residual bus simulation within two weeks.

---

#### 3.2. Software
**3.2.1. Software Version**
Content to expand upon this section is forthcoming, as referenced under broader System Description details.
</page>

<page number="6">
The residual bus simulation shall be created with Vector CANoe (Vers. 8.0 or higher).

### 3.2.2. Scripts
Every CAN-node shall be represented with a Vector CAPL-script. For further information, please refer to Req. 16051 "Design Rules."

### 3.2.3. Documentation
Every CAPL-script shall be documented. This documentation shall contain the following parts:
- List of all used abbreviations with declaration
- Description of every function
- Test report of the model testing
- Change history

### 3.2.4. Data Exchange
The data exchange shall be done via the Exchange server.

#### 3.2.4.1. Data Types
The data exchange shall be done via different file types:
- *.DBC…CAN database: This file defines every signal and message on the CAN bus.
- *.CAN…Vector CAPL script: This file defines a CAN node model, which represents an ECU.

#### 3.2.4.2. File Name
All CAPL files shall be named as shown in the following example:
**ESC_AdditionalData_V2.3.CAN**
- Name of the ECU: ESC
- Additional data: AdditionalData
- Actual version: V2.3
- Data type: *.CAN

### 3.3. Design Rules
#### 3.3.1. Language
Program and documentation shall be done in English.

#### 3.3.2. CAN Specification
The CAPL scripts shall conform to CES_CAN specification.

#### 3.3.3. Variables and Signals
Every variable shall start with the letters corresponding to the ECU.  
For example, a variable for the ESC (Electronic Stability Control) shall be written as: **ESC_myVariable.**  
Each ECU is responsible for the signal distribution of the corresponding signal defined by the DBC file.
</page>

<page number="7">
The word "shall" is used to state a binding requirement. Such requirements are externally verifiable by manipulation or observation.  
The word "should" is used for preferences or desires in implementation that are not strictly binding.  
The word "may" is used to denote options that are left to the implementer.

### 3. System description  
#### 3.3.4. Model  

##### 3.3.4.1. Startup  
At startup, every signal shall be sent with the default value.  

##### 3.3.4.2. Function  
- It’s not necessary to implement functions representing a physical or logical behavior, like a decrease of the wheel speed when the brake pedal is operated.  
- A full functional alive counter with the same behavior as the ECU shall be programmed.  
- A full functional Application CRC calculation with the same behavior as the ECU shall be programmed.  
- A full functional network management with the same behavior as the ECU shall be programmed.  

##### 3.3.4.3. Cyclic messages  
All cyclic messages shall be created with the same behavior as the original ECU. That includes the following points:  
- Original cycle time  
- Original message ID  
- Original message length  

For each signal the ECU is sending, an environmental variable shall be created and a slider or button shall be created at a front panel.  

##### 3.3.4.4. Event triggered messages  
All event triggered messages shall be created with the same behavior as the original ECU.  
For each event triggered message, an environmental variable shall be created and a button shall be created at a front panel.  

##### 3.3.4.5. Variety  
If more than one variant is defined for an ECU, a model for each variant shall be created.  

#### 3.3.5. Multiple CAN buses  
For each CAN-bus, a separate residual bus simulation shall be created. If an ECU is connected to more than one CAN-network like a Gateway, this should be programmed with its own gateway node.  

#### 3.3.6. Visualization  
Every ECU is represented by its own panel. With that panel, it shall be possible to change the values of each signal the ECU is sending on the bus. Furthermore, it shall be possible to send each event triggered message.  

##### 3.3.6.1. Signals  
Every signal the ECU is sending on the bus shall be adjustable. It’s essential that the full possible range can be set (including all allowed and not allowed values). Therefore, every signal shall be displayed on the panel in the following way:  

###### 3.3.6.1.1. Boolean signals  
**Figure 3:** Visualization of boolean signals.
</page>

<page number="8">
Version: V1.0.0  
Print date  
Uncontrolled copy when printed  
Status  
8 | 12  
Functional Responsibility  
VinFast  
Residual Bussimulation Specification  
VFDSXVEEP0011  

Each boolean signal shall be visualized by a switch. Both states of the switch shall be named, corresponding to the value table of the DBC file.

### 3.3.6.1.2. State signals
Each state signal shall be visualized, so that every possible value of the signal can be selected.  
Each state of the visualized switch shall be named, corresponding to the value table of the DBC file.  

#### Figure 4: Visualisation of state signals

### 3.3.6.1.3. Integer and floating point signals
Each integer or floating point signal shall be visualized with a slide bar and an input field.  

#### Figure 5: Visualisation of integer and floating point signals  

### 3.3.6.1.4. Special signal
</page>

<page number="9">
The word "shall" is used to state a binding requirement. Such requirements are externally verifiable by manipulation or observation.

Should  
The word "should" is used for preferences or desires in implementation that are not strictly binding.

May  
The word "may" is used to denote options that are left to the implementer.

**3. System description**  

**3.1. Creation Process**  
1. The DBC-File is created based on the information of the supplier.  
2. The DBC-File is distributed to each Module Leader, SE-team.  
3. Each supplier has to create a model which represents their ECU.  
4. Every model is collected.  
5. The ECU models are used for testing at sub-system test benches.  
6. Models are merged into a residual bus simulation.  
7. The residual bus simulation is distributed to each Module Leader, SE-team.  
8. Each supplier has to test their ECU with the residual bus simulation.  

**3.1.1. Process Overview**  
Figure 1 illustrates the process of DBC creation, model distribution, sub-system testing, and the generation of the residual bus simulation.  

**3.1.2. Time limits**  
After the first DBC file draft, the residual bus simulation shall be created and sent by the suppliers. In case of a later release, every supplier shall update and send the updated residual bus simulation within 2 weeks.  

**3.2. Software**  

**3.2.1. Software version**  
The residual bus simulation shall be created with Vector CANoe (Vers. 8.0 or higher).  

**3.2.2. Scripts**  
Every CAN-node shall be represented with a Vector CAPL-script. For further information, please refer to Req. 16051 "Design Rules."  

**3.2.3. Documentation**  
Every CAPL-script shall include the following documentation:  
- List of all used abbreviations with declaration.  
- Description of every function.  
- Test report of the model testing.  
- Change history.  

**3.2.4. Data exchange**  

**3.2.4.1. Data types**  
The data exchange shall be done via the following file types:  
- *.DBC: CAN database, which defines every signal and message on the CAN bus.  
- *.CAN: Vector CAPL script, which defines a CAN node model representing an ECU.  

**3.2.4.2. File name**  
Figure 2 demonstrates an example for naming CAPL files, detailing the name of the ECU, additional data, the actual version, and the data type.  

**3.3. Design rules**  

**3.3.1. Language**  
Program and documentation shall be done in English.  

**3.3.2. CAN Specification**  
The CAPL scripts shall conform to CES_CAN specifications.  

**3.3.3. Variables and signals**  
- Each variable shall start with letters corresponding to the ECU (e.g., ESC_myVariable for the ESC).  
- Each ECU is responsible for the signal distribution defined by the DBC file.  

**3.3.4. Model**  

**3.3.4.1. Startup**  
At startup, every signal shall be sent with the default value.  

**3.3.4.2. Function**  
- Functions representing physical or logical behavior, such as braking effects, are unnecessary.  
- Full functional alive counters, Application CRC calculations, and network management with the same behavior as the ECU shall be implemented.  

**3.3.4.3. Cyclic messages**  
Cyclic messages shall replicate original ECU behavior, including:  
- Original cycle time.  
- Original message ID.  
- Original message length.  
Each signal sent by the ECU shall contain sliders or buttons on the panel for environmental variable adjustments.  

**3.3.4.4. Event triggered messages**  
Event triggered messages shall replicate the behavior of the original ECU, with buttons implemented on the panel for each event.

**3.3.4.5. Variety**  
If multiple variants are defined for an ECU, a model for each variant shall be created.

**3.3.5. Multiple CAN buses**  
A separate residual bus simulation shall be created for each CAN bus. Gateways connecting multiple networks shall use gateway nodes for programming.  

**3.3.6. Visualization**  
Each ECU shall be represented by panels allowing:  
- Adjustable values for every signal the ECU sends on the bus.  
- Sending of event triggered messages.  

**3.3.6.1. Signals**  

**3.3.6.1.1. Boolean signals**  
Boolean signals shall be visualized by a switch. Both switch states shall correspond to DBC file definitions.  

**3.3.6.1.2. State signals**  
State signals shall be visualized such that every possible value can be selected, with names corresponding to the DBC file.  

**3.3.6.1.3. Integer and floating point signals**  
Integer and floating point signals shall utilize a slide bar and input field visualization.  

**3.3.6.1.4. Special signals**  
Special signals, such as speed data, shall utilize CANoe-provided visualizations alongside slide bars and input fields.  

Figure 6: Example of special signal visualization.  

**3.3.6.2. Event triggered messages**  
Figure 7 demonstrates the use of buttons to send ECU event-triggered messages as implemented on the panel.

**3.4. Examples**  
The following example illustrates CAPL Code for ECU programming:
</page>

<page number="10">
**Version: V1.0.0**  
**Print date**  
**Uncontrolled copy when printed**  
**Status**  
10 | 12  
**Functional Responsibility**  
VinFast  
Residual Bussimulation Specification  
VFDSXVEEP0011  

The following CAPL code provides the example for CRC calculation, timer initiation, and cyclic signal output for the residual bus simulation:
</page>

<page number="11">
4. Development Environments.

4.1. Development Environment.
The residual bus simulation shall be created with Vector CANoe (Vers. 8.0 or higher), therefore each supplier shall use this software. If a supplier hasn't version 8.0 or higher, using a lower version can also be possible because the software is downwards compatible. However, this should only be done as an exception, and suppliers have to inform which version is used to minimize risks which may be caused by compatibility problems.

5. Testing.

5.1. Performed tests.
Every supplier shall test his model before sending. The following tests shall be performed: 
• The cycle time of every cyclic signal has to be checked. 
• The functionality of every alive counter has to be checked. 
• The functionality of every CRC has to be checked. 
• Every message has to be checked if it’s using the correct message ID. 
• Every signal has to be checked if it can assume the whole value range.

5.2. Test reports.

Table 4: Required test reports.
In the above table, all required test reports have to be listed.

| POS | Test Report                | Related Specification         | Related CAN Database | Description | Test Report Template |
|-----|----------------------------|-------------------------------|----------------------|-------------|-----------------------|
| 1   | Test report Residual bus simulation | SES Residual bus simulation | *.DBC | FRS xx | |
| 2   |                            |                               |                      |             |                       |
| 3   |                            |                               |                      |             |                       |
| 4   |                            |                               |                      |             |                       |
| 5   |                            |                               |                      |             |                       |
| 6   |                            |                               |                      |             |                       |
| 7   |                            |                               |                      |             |                       |
| 8   |                            |                               |                      |             |                       |
| 9   |                            |                               |                      |             |                       |

6. References.
</page>

<page number="12">
6. References. 

6.1. Applicable Documents.  
Ref. No. | Name                                         | Version  
------- | -------------------------------------------- | --------  
QD 1    | CES_CAN                                      | latest  
QD 2    | CES_ECU_Identifier_Specification_RS          | latest  
QD 3    | CES_Clamp_Concept                            | latest  

6.2. Norms and Standards.  
Ref. No | Document Name  
------- | ---------------------------  

Table 6: Normative references.  

This standard incorporates provisions from other publications. These normative references are cited at the appropriate places in the text, and the publications are listed hereafter. The respective latest edition of the publication is applicable.
</page>
</pages>
